package packets

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"
)

func TestDecodeProp(t *testing.T) {

	testData := []byte{
		0x32, 0x18, 0x00, 0x00, 0x00, 0x6f, 0x02, 0x00,
		0x00, 0x00, 0xde, 0x03, 0x00, 0x23, 0xe7, 0xb1,
		0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x9f, 0xef,
		0xbc, 0x9f, 0xef, 0xbc, 0x9f, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x01, 0x01,
	}

	p := Properties{
		item: make(map[byte]interface{}),
	}

	p.Decode(1, testData, 0)

	fmt.Printf("%v", p.item)

}

func TestEncodeProp(t *testing.T) {

	p := Properties{
		item: make(map[byte]interface{}),
	}
	p.item[byte(3)] = string([]byte{0x00, 0x23, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
		0xef, 0xbc, 0x9f, 0xef, 0xbc, 0x9f, 0xef, 0xbc,
		0x9f, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,
		0x31, 0x31, 0x31, 0x31, 0x31})
	p.item[byte(1)] = byte(1)
	p.item[byte(2)] = uint32(255)

	buf := new(bytes.Buffer)
	ret, l, _ := p.Encode(1, buf)
	fmt.Printf("%v ,%v   =?? \r\n", hex.Dump(ret), l)
	data := make([]byte, 0)
	data = append(data, byte(l))
	data = append(data, ret...)

	fmt.Printf("%v ,%v   =??", hex.Dump(data), len(data))

}
